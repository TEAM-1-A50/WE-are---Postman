{
	"info": {
		"_postman_id": "828f1354-2874-474d-ae81-f8f1a6f32ff1",
		"name": "API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "3954983-828f1354-2874-474d-ae81-f8f1a6f32ff1"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Register users",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "795d3c36-efa1-43bb-83f0-afe8690cc3ff",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c67b5d2a-f8e9-458a-9823-08e3b1eb55c0",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3699e71d-9394-4eed-9f31-c75add28ab7f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Register user without expertise category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79b78466-e7c2-4923-911c-240d8b08db53",
												"exec": [
													"pm.test(\"Status code is not 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3bca77ea-1524-4d91-baf1-ff4593b0ed1d",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f7ba4d6f-6ad0-435d-90c1-13b1a9853acb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Register admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "807a25de-1fc1-4681-b762-9f9135931240",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is ADMIN\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_ADMIN', \"Expected user role to be 'ROLE_ADMIN', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b7343df-fb7c-4df3-bd6d-8b827e7bec87",
												"exec": [
													"var randomFirstName = pm.collectionVariables.replaceIn('{{$randomFirstName}}');",
													"randomFirstName = \"admin\" + randomFirstName;",
													"pm.collectionVariables.set(\"username\", randomFirstName);",
													"",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7bdda1b9-d563-4ea5-820e-2c14cc210579",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_ADMIN\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Authenticate user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51b0d5e7-fa67-4f0d-9a23-87070a7557ca",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fd11c6d1-dde5-4049-a901-807b4dcb3a76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseurl}}/authenticate",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								}
							],
							"id": "a85d17af-328c-4489-9897-e9f911d8e474"
						},
						{
							"name": "Get user by ID, name or expertise",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aafc72de-3784-4b95-a9b5-0039519f2d9e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44871ad1-9474-49b0-b5a8-3693c880fedc",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "119c0c17-6051-4ea3-b97a-687e67006717",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49952402-de3a-4df9-951a-4dceb9116499",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"// Get the expected username and id value from the environment",
													"var expectedUsername = pm.collectionVariables.get(\"username\");",
													"var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"var responseUsername = pm.response.json().username;",
													"var responseUserID = pm.response.json().id;",
													"",
													"// Check if the expected username matches the response username",
													"pm.test(\"Usernames should match\", function () {",
													"    pm.expect(responseUsername).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseUsername);",
													"});",
													"",
													"// Check if the expected username matches the response username",
													"pm.test(\"IDs should match\", function () {",
													"    pm.expect(responseUserID.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseUserID);",
													"});",
													"",
													"var expertise = pm.response.json().expertise;",
													"pm.collectionVariables.set(\"userExpertise\", expertise);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "74b9aae1-26d8-4ef4-97b8-4d6c7e85d4fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}?principal={{username}}",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}"
											],
											"query": [
												{
													"key": "principal",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by expertise",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "935af9b9-7f29-4048-881a-1a20978c7943",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"// Get the \"category\" name from the response",
													"var categoryName = pm.response.json()[0].expertiseProfile.category.name;",
													"",
													"// Get the \"userExpertise\" collection variable",
													"var userExpertise = pm.collectionVariables.get(\"userExpertise\");",
													"",
													"// Check if the \"category\" name matches the \"userExpertise\" variable",
													"pm.test(\"Category name should match expertise\", function () {",
													"    pm.expect(categoryName).to.equal(userExpertise,  \"Category name and expertise mismatch. Expected: \" + userExpertise + \", Actual: \" + categoryName);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9d867d52-a610-4993-9207-07d5854d8cbd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"{{userExpertise}}\",\n  \"searchParam2\": \"\",\n  \"size\": 5\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf02aa50-ff35-46b9-a149-66ee926f659b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"        ",
													"pm.test(\"User's first name is correct\", function () {",
													"    var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"});",
													"",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72f4b27a-20b4-4d13-a063-3eb80c7beecb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "abe41ec2-ef32-454d-9797-4b71f5474238",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_firstName}}\",\n  \"size\": 10\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by full name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8be59414-87c3-4fd3-a3bf-35141ca14d82",
												"exec": [
													"var fullName = pm.collectionVariables.get(\"user_firstName\") + \" \" + pm.collectionVariables.get(\"user_lastName\");",
													"",
													"pm.collectionVariables.set(\"user_fullName\", fullName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd1f14f7-72d5-428e-97e8-2eb2c63e81a3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"        ",
													"pm.test(\"User's first name is correct\", function () {",
													"    var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"});",
													"pm.test(\"User's last name is correct\", function () {",
													"    var expectedLastName = pm.collectionVariables.get(\"user_lastName\"); ",
													"    var responseData = response.json();",
													"    pm.expect(responseData.lastName).to.eql(expectedLastName, \"Expected last name to be '\" + expectedLastName + \"', but found '\" + responseData.lastName + \"'\");",
													"});",
													"",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4f192c09-ba71-4661-b5ae-87b2d183b8e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_fullName}}\",\n  \"size\": 1\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"id": "00d4eab2-80ea-4dc3-b6c2-89ac168b3463"
						},
						{
							"name": "Update user's profile information",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c19a516-3567-4f76-8e29-50d1d7235dc6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fab716c8-1bdf-4a4c-8b8f-516f7a733f50",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3aed7e64-bbb7-4aaf-a452-4d3023e0ce2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's personal profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "040859f7-7d31-46f5-ba4d-49da902ab6f3",
												"exec": [
													"// To edit your own profile user must be authenticated",
													"// Define the form data",
													"const formData = {",
													"    username: pm.collectionVariables.get(\"username\"),",
													"",
													"    password: pm.collectionVariables.get(\"password\")",
													"};",
													"    console.log(formData);",
													"",
													"// Define the POST request configuration",
													"const postRequestConfig = {",
													"    method: 'POST',",
													"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"    header: 'Content-Type: application/x-www-form-urlencoded',",
													"    body: {",
													"        mode: 'formdata',",
													"        formdata: [",
													"            { key: 'username', value: formData.username },",
													"            { key: 'password', value: formData.password }",
													"        ]",
													"    }",
													"};",
													"",
													"// Send the POST request",
													"pm.sendRequest(postRequestConfig, function (err, response) {",
													"    console.log(response);",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"POST request failed\");",
													"        });",
													"    } ",
													"});",
													"",
													"",
													"",
													"// Generate a random birth date within a desired range",
													"function getRandomDate(minYear, maxYear) {",
													"    const year = Math.floor(Math.random() * (maxYear - minYear + 1)) + minYear;",
													"    const month = Math.floor(Math.random() * 12) + 1; // Months are 1-12",
													"    const day = Math.floor(Math.random() * 31) + 1; // Days are 1-31",
													"",
													"    // Ensure the day and month are formatted with leading zeros if needed",
													"    const formattedMonth = month.toString().padStart(2, '0');",
													"    const formattedDay = day.toString().padStart(2, '0');",
													"",
													"    return `${year}-${formattedMonth}-${formattedDay}`;",
													"}",
													"",
													"// Define the desired birth date range (adjust as needed)",
													"const minBirthYear = 1930;",
													"const maxBirthYear = 2008;",
													"",
													"// Generate a random birth date within the specified range",
													"const randomBirthDate = getRandomDate(minBirthYear, maxBirthYear);",
													"",
													"// Set the random birth date as a collection variable",
													"pm.collectionVariables.set(\"user_birthDate\", randomBirthDate);",
													"",
													"",
													"",
													"// Set random first and last name",
													"pm.collectionVariables.set(\"user_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"user_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"",
													"// Set random city",
													"// Parse the CSV content from the environment variable",
													"const cityCSV = pm.collectionVariables.get(\"cityData\").split('\\n');",
													"const randomIndex = Math.floor(Math.random() * cityCSV.length);",
													"",
													"// Select a random city and its ID",
													"const [cityId, cityName] = cityCSV[randomIndex].split(',');",
													"",
													"",
													"// Set the \"city\" and \"id\" variables in the request environment",
													"pm.collectionVariables.set(\"city_name\", cityName.trim());",
													"pm.collectionVariables.set(\"city_id\", parseInt(cityId));",
													"",
													"",
													"// Set either MALE or FEMALE as sex",
													"const sexes = [\"MALE\", \"FEMALE\"];",
													"",
													"// Generate a random index to select a value",
													"const index = Math.floor(Math.random() * sexes.length);",
													"",
													"// Get the random sex value",
													"const randomSex = sexes[index];",
													"",
													"// Set the random sex as a collection variable",
													"pm.collectionVariables.set(\"user_sex\", randomSex);",
													"",
													"// Set picture privacy",
													"// Generate a random boolean value (true or false)",
													"const randomBoolean = Math.random() < 0.5;",
													"",
													"// Set the random boolean value as a collection variable",
													"pm.collectionVariables.set(\"user_picturePrivacy\", randomBoolean);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23cb5061-3de9-40a4-916a-9542837dd14a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, 'Expected 200');",
													"});",
													"",
													"pm.test(\"Check birthYear in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.birthYear).to.equal(pm.collectionVariables.get(\"user_birthDate\"));",
													"});",
													"",
													"pm.test(\"Check firstName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.firstName).to.equal(pm.collectionVariables.get(\"user_firstName\"));",
													"});",
													"",
													"pm.test(\"Check lastName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.lastName).to.equal(pm.collectionVariables.get(\"user_lastName\"));",
													"});",
													"",
													"pm.test(\"Check picturePrivacy in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    const expectedPicturePrivacy = pm.collectionVariables.get(\"user_picturePrivacy\"); ",
													"",
													"    pm.expect(responseJson.picturePrivacy).to.equal(expectedPicturePrivacy);",
													"});",
													"",
													"pm.test(\"Check sex in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.sex).to.equal(pm.collectionVariables.get(\"user_sex\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b6f788b5-93c6-4ff3-aeae-71bc1c7278a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthYear\": \"{{user_birthDate}}\",\n  \"firstName\": \"{{user_firstName}}\",\n  \"lastName\": \"{{user_lastName}}\",\n  \"location\": {\n    \"city\": {\n      \"city\": \"{{city_name}}\",\n      \"country\": {},\n      \"id\": {{city_id}}\n    }\n    ,\n    \"id\": 1\n  },\n  \"memberSince\": \"\",\n  \"personalReview\": \"\",\n  \"picture\": \"\",\n  \"picturePrivacy\": {{user_picturePrivacy}},\n  \"sex\": \"{{user_sex}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/personal",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"personal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's expertise profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8cc32b13-0dfe-49f4-9396-006db834c2d5",
												"exec": [
													"// // To edit your own profile user must be authenticated",
													"// // Define the form data",
													"// const formData = {",
													"//     username: pm.collectionVariables.get(\"username\"),",
													"",
													"//     password: pm.collectionVariables.get(\"password\")",
													"// };",
													"//     console.log(formData);",
													"",
													"// // Define the POST request configuration",
													"// const postRequestConfig = {",
													"//     method: 'POST',",
													"//     url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"//     header: 'Content-Type: application/x-www-form-urlencoded',",
													"//     body: {",
													"//         mode: 'formdata',",
													"//         formdata: [",
													"//             { key: 'username', value: formData.username },",
													"//             { key: 'password', value: formData.password }",
													"//         ]",
													"//     }",
													"// };",
													"",
													"// // Send the POST request",
													"// pm.sendRequest(postRequestConfig, function (err, response) {",
													"//     console.log(response);",
													"//     if (err) {",
													"//         console.error(err);",
													"//         pm.test(\"Request failed\", function () {",
													"//             pm.expect.fail(\"POST request failed\");",
													"//         });",
													"//     } ",
													"// });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ffff93f0-3e29-451d-9271-b6092bf21234",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "90e2c070-477f-4053-ac9a-5706e59ae635",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"availability\": 3,\n  \"category\": {\n    \"id\": 103, \n    \"name\": \"Author\"\n  },\n  \"id\": 0,\n  \"skill1\": \"cook\",\n  \"skill2\": \"clean\",\n  \"skill3\": \"vacuum\",\n  \"skill4\": \"dust\",\n  \"skill5\": \"wash\",\n  \"skills\":[\"more\", \"and more\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/expertise",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"expertise"
											]
										}
									},
									"response": []
								}
							],
							"id": "846209c4-c589-4572-ade7-1a1ba3ea36bb"
						}
					],
					"id": "47047faa-0a0e-49a3-a222-0e10b892d020"
				},
				{
					"name": "Connection requests",
					"item": [
						{
							"name": "Register user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976bd049-1850-475a-8d39-80408eaa7e5e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"senderUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62de87d2-9e02-43aa-9717-f39079810c72",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0599acfd-8d37-4fab-abc0-2a642a069c82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac075f8-2a05-4ced-a25a-a3e579c2866c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ae8bd8e3-bc19-4e5c-8aba-683022b2a0d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f82544f-0118-413c-8087-ee681cc18d6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"recipientUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5439180f-73f6-4f3d-9b49-f7e04e2c5299",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fce62fee-56b4-4c5f-b5b8-5cf676c392fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "User A sends connection request to user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cb97416-e05b-4d48-b28d-df1d98139336",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    const expectedSender = pm.collectionVariables.get('senderUsername');",
											"    const expectedRecipient = pm.collectionVariables.get('recipientUsername');",
											"",
											"    // Extract the response text",
											"    const responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "48b478ef-06d9-46be-88a6-17284a1a5889",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{userID}},\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/auth/request",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b3dd8e4-65aa-4ae3-9464-32e159807a45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8249dc0b-e91a-4aff-9f45-e82154f5b342",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c699bf-3ad1-48b0-b9db-b7fc9845242d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Approved status is false\", function () {",
											"    // Extract the response data as JSON",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the \"approved\" status",
											"    pm.expect(firstObject.approved, \"Expected 'approved' status to be false\").to.equal(false);",
											"});",
											"",
											"pm.test(\"Response has 'receiver' and 'sender'\", function () {",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the presence of 'receiver' and 'sender' fields",
											"    pm.expect(firstObject).to.have.property(\"receiver\", \"Response should have 'receiver' field\");",
											"    pm.expect(firstObject).to.have.property(\"sender\", \"Response should have 'sender' field\");",
											"});",
											"",
											"",
											"const responseData = pm.response.json();",
											"const requestId = parseInt(responseData[0].id, 10);",
											"",
											"// Set the ID as a collection variable",
											"pm.collectionVariables.set(\"requestId\", requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e6e69ff9-006c-4513-bab1-6a4bf0b2bfe9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve connection request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "717a6d6d-582c-4ff4-8f82-50cb3ff32d4e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    const expectedSender = pm.collectionVariables.get('senderUsername');",
											"    const expectedRecipient = pm.collectionVariables.get('recipientUsername');;",
											"",
											"    // Extract the response text",
											"    const responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e99685d7-b2ef-4faa-a38a-3400a2dda0b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/approve?requestId={{requestId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										"approve"
									],
									"query": [
										{
											"key": "requestId",
											"value": "{{requestId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e748b625-15aa-4bec-81a7-6eadbf48049b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response is an empty array\", function () {",
											"    // Extract the response data as JSON",
											"    const responseData = pm.response.json();",
											"",
											"    // Check if the response data is an array and is empty",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.be.empty;",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1380559a-0fe2-4d5c-9a1f-be59ec4ab5d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						}
					],
					"id": "db99221d-581d-40ea-aa44-2ec7d3bf8163"
				}
			],
			"id": "5dd8f024-d7cd-4cfa-ae27-c67b5f5d0492"
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Authenticate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "739210ff-2db0-42d5-8c5c-f91a6ad67a7a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.collectionVariables.set(\"authUser\", pm.request)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dc752e9f-ddcc-48ea-8850-1dcdb68a0e2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"// Access the response JSON directly\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Function to extract the date as a JavaScript Date object for comparison\r",
											"function extractDate(post) {\r",
											"    return new Date(post.date);\r",
											"}\r",
											"\r",
											"// Find the post with the newest date\r",
											"var newestPost = responseJson.reduce(function (maxPost, post) {\r",
											"    return extractDate(post) > extractDate(maxPost) ? post : maxPost;\r",
											"}, responseJson[0]);\r",
											"\r",
											"// Extract the ID of the newest post\r",
											"var newestPostId = newestPost.postId;\r",
											"\r",
											"// Log the ID of the newest post\r",
											"console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"// You can also set a Postman environment variable with the result\r",
											"pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.collectionVariables.set(\"getPost\", pm.request);\r",
											""
										],
										"type": "text/javascript",
										"id": "72a21d11-fd49-42d3-b47c-8fbc9266f947"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"));\r",
											""
										],
										"type": "text/javascript",
										"id": "cd5ed8ed-9241-4bcf-957d-1387c839192f"
									}
								}
							],
							"id": "fbde64bc-4d2b-4926-afac-7a3cb1515e1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Id in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.not.null;\r",
											"});\r",
											"pm.test(\"Content in response\", function () {\r",
											"    var postcontent= pm.collectionVariables.get('hundred_symbols');\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.content).to.equal(postcontent);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"// Access the response JSON directly\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Extract the ID of the newest post\r",
											"var newestPostId = responseJson.postId;\r",
											"\r",
											"// Log the ID of the newest post\r",
											"console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"// You can also set a Postman environment variable with the result\r",
											"pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"postCreate\", pm.request);\r",
											"\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "78981291-2fb2-4aed-a02e-071b441ab0d8"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"));\r",
											"\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(34).fill('xo ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols', hundredSymbols);\r",
											""
										],
										"type": "text/javascript",
										"id": "461edf85-1330-41dd-a559-87893d50f73a"
									}
								}
							],
							"id": "04d7c401-12c6-433e-adef-a1b384f91a78",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"id": "415c28a5-6700-4c7f-9290-096806e70b07"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.postId).to.not.null;\r",
											"        });\r",
											"pm.test(\"User expected to have liked the comment one from the test\", function() {\r",
											"    pm.expect(jsonData.likes[0].username).to.equal(pm.collectionVariables.get('usertest1'))\r",
											"});\r",
											"\r",
											"var newestPostId = pm.collectionVariables.get('newestPostId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "9338bf13-d97a-434a-834e-20f45fb03422"
									}
								}
							],
							"id": "27b24b20-81e9-40b7-adcd-ed57b2fe2dc1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/likesUp?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('edited ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_edited', hundredSymbols);"
										],
										"type": "text/javascript",
										"id": "4783ab42-2182-4114-842d-0ba275ab44df"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.sendRequest(pm.collectionVariables.get(\"getPost\"), function (response) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"    });\r",
											"\r",
											"    if (response && response.json && typeof response.json === 'function') {\r",
											"        var jsonData = response.json();\r",
											"        pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.postId).to.not.null;\r",
											"        });\r",
											"\r",
											"        var postcontent = pm.collectionVariables.get('hundred_symbols');\r",
											"        pm.test(\"Content in response\", function () {\r",
											"            pm.expect(jsonData.content).to.equal(postcontent);\r",
											"        });\r",
											"    } else {\r",
											"        pm.test(\"Response body is empty\", function () {\r",
											"            pm.expect.fail(\"Response body is empty\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"var newestPostId = pm.collectionVariables.get('newestPostId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "0d1a31b0-2e31-4542-924a-a22b5cf28243"
									}
								}
							],
							"id": "c35d13d9-0459-4621-9095-b488f5dbb400",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols_edited}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/editor?name={{usertest1}}&postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "name",
											"value": "{{usertest1}}"
										},
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c925226a-1d35-4eab-b9a5-2cf686efdc22",
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('usertest1'),\r",
											"    password: pm.collectionVariables.get('password1')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c16dd7a8-97fe-49a4-8cd0-cd923e4c91d0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var deletedPostId=pm.collectionVariables.get('newestPostId');\r",
											"\r",
											"pm.sendRequest({\r",
											"       url: `${pm.collectionVariables.get('baseurl')}/api/post/}`,\r",
											"    method: 'GET',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"}, function(err,response){\r",
											"    if (err){\r",
											"        console.error(err);\r",
											"    } else{\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);  \r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = jsonData.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.test(\"Post is deleted\", function () {\r",
											"    pm.expect(jsonData.postId).to.not.equal(deletedPostId);\r",
											"});\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"deletePost\", pm.request)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f62a3441-0403-4a03-afbe-bb2047556de5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/manager?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "49d67ca4-3034-4ae7-9134-5b99e53a5707"
				}
			],
			"id": "41ecbd79-45ad-4f10-a705-8075aeaf9c45"
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Find All Comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9a74dde0-d7bf-4942-b879-7c8da9da9990",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aae52a8b-d608-4a75-b7ea-f7bbe7938dc3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let commentsCount = jsonData.length;\r",
											"console.log(commentsCount)\r",
											"pm.collectionVariables.set(\"commentsCount\", commentsCount);\r",
											"pm.collectionVariables.set(\"findAllComments\", pm.request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d53fd8f0-f4e0-41b2-a4f1-9c53a5128e53",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82c1cea9-0b2c-46aa-b93a-aeec6be6a1f2",
										"exec": [
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_comment', hundredSymbols);\r",
											"\r",
											"findallComments();\r",
											"\r",
											"function findallComments() {pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The current comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"previousCommentsCount\", commentsCount);\r",
											"    }\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b530d083-84e5-41dd-9757-6f41cf03542e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"var commentsCountPrevious = pm.collectionVariables.get(\"commentsCount\");\r",
											"console.log(\"Previous comments count after comment creation: \" + commentsCountPrevious);\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The new comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setCommentsCommentsCount() {pm.collectionVariables.set(\"commentsCount\", commentsCount);}\r",
											"        setCommentsCommentsCount();\r",
											"\r",
											"        pm.test(\"Comments count is updated\", function () {\r",
											"            pm.expect(pm.collectionVariables.get(\"previousCommentsCount\") + 1).to.eql(commentsCount);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"newestCommentId\", pm.response.json().commentId);\r",
											"pm.collectionVariables.set(\"commentCreate\", pm.request);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "001b6094-05fa-4213-8208-9490922c0860",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"{{hundred_symbols_comment}}\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{newestPostId}},\r\n  \"userId\": {{userID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a58d1519-f7ac-441d-a2c1-bfb5f736278b",
										"exec": [
											"const hundredSymbolsEditComment = Array(7).fill('edited comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_edited_comment', hundredSymbolsEditComment);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"), function (err, response) {\r",
											"    createComment();\r",
											"});\r",
											"\r",
											"function createComment() {pm.sendRequest(pm.collectionVariables.get(\"commentCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestCommentId = responseJson.commentId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the comment with the newest date is: \" + newestCommentId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestCommentId\", newestCommentId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"        console.log(pm.collectionVariables.get(\"userID\"));\r",
											"        console.log(pm.collectionVariables.get(\"newestCommentId\"));\r",
											"    }\r",
											"});}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c1ca5ab6-b623-4d94-899f-6a43745ae9ec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"getPost\"), function (response) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"    });\r",
											"\r",
											"    if (response && response.json && typeof response.json === 'function') {\r",
											"        var jsonData = response.json();\r",
											"        pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.commentId).to.not.null;\r",
											"        });\r",
											"\r",
											"        var commentContent = pm.collectionVariables.get('hundred_symbols_edited_comment');\r",
											"        pm.test(\"Content in response\", function () {\r",
											"            pm.expect(jsonData.content).to.equal(commentContent);\r",
											"        });\r",
											"    } else {\r",
											"        pm.test(\"Response body is empty\", function () {\r",
											"            pm.expect.fail(\"Response body is empty\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"var newestCommentId = pm.collectionVariables.get('newestCommentId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?commentId=${newestCommentId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ba189c02-d91d-4bea-ac83-93ae6c237d5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/editor?commentId={{newestCommentId}}&content={{hundred_symbols_edited_comment}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										},
										{
											"key": "content",
											"value": "{{hundred_symbols_edited_comment}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "11d08056-ef6d-4ec0-bdcf-c78e774c0f6c",
										"exec": [
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_comment', hundredSymbols);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequestConfig, function (err, response) {\r",
											"    createComment();\r",
											"    findallComments();\r",
											"});\r",
											"\r",
											"function findallComments() {pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The current comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"previousCommentsCount\", commentsCount);\r",
											"    }\r",
											"});}\r",
											"\r",
											"function createComment() {pm.sendRequest(pm.collectionVariables.get(\"commentCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestCommentId = responseJson.commentId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the comment with the newest date is: \" + newestCommentId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestCommentId\", newestCommentId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"        console.log(pm.collectionVariables.get(\"userID\"));\r",
											"        console.log(pm.collectionVariables.get(\"newestCommentId\"));\r",
											"    }\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a701451a-6c67-4ed0-8aad-2b69feefdcbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"var commentsCountPrevious = pm.collectionVariables.get(\"commentsCount\");\r",
											"console.log(\"Previous comments count after comment creation: \" + commentsCountPrevious);\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The new comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setCommentsCommentsCount() {pm.collectionVariables.set(\"commentsCount\", commentsCount);}\r",
											"        setCommentsCommentsCount();\r",
											"\r",
											"        pm.test(\"Comments count is updated\", function () {\r",
											"            pm.expect(pm.collectionVariables.get(\"previousCommentsCount\") + 1).to.eql(commentsCount);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"newestCommentId\", pm.response.json().commentId);\r",
											"pm.collectionVariables.set(\"commentCreate\", pm.request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "99ea17a9-0594-4501-916e-b3b3316c992b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/manager?commentId={{newestCommentId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7b35f670-5cf3-4eef-a543-0e1a45e313a7",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4321a799-52ef-4dac-bc6e-020ce1af5dd7",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.sendRequest(pm.collectionVariables.get(\"registerUser\"), function (err, response) {",
									"if (err) {",
									"        console.error(err);",
									"        // Handle the error if needed",
									"    } else {",
									"        var jsonData = response.json();",
									"        console.log(jsonData.body);",
									"",
									"    const formData = {",
									"    username: pm.collectionVariables.get('username'),",
									"    password: pm.collectionVariables.get('password')};",
									"",
									"// Define the POST request configuration",
									"const postRequestConfig = {",
									"    method: 'POST',",
									"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
									"    header: 'Content-Type: application/x-www-form-urlencoded',",
									"    body: {",
									"        mode: 'formdata',",
									"        formdata: [",
									"            { key: 'username', value: formData.username },",
									"            { key: 'password', value: formData.password }",
									"        ]",
									"    }",
									"};",
									"",
									"        pm.sendRequest(postRequestConfig);",
									"        createPost();",
									"",
									"    }",
									"});",
									"",
									"function authenticateUser() {pm.sendRequest(collectionVariables.get(\"authUser\"));}",
									"",
									"function createPost() {pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {",
									"    if (err) {",
									"        console.error(err);",
									"        // Handle the error if needed",
									"    } else {",
									"        var jsonData = response.json();",
									"        console.log(jsonData);",
									"",
									"        // Access the response JSON directly",
									"        var responseJson = response.json();",
									"",
									"        // Extract the ID of the newest post",
									"        var newestPostId = responseJson.postId;",
									"",
									"        // Log the ID of; the newest post",
									"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);",
									"",
									"        // You can also set a Postman environment variable with the result",
									"        function setNewestPostId() {pm.collectionVariables.set(\"newestPostId\", newestPostId);}",
									"        function setNewestCommentPostId() {pm.collectionVariables.set(\"commentCreatedPostId\", newestPostId);}",
									"        setNewestPostId();",
									"        setNewestCommentPostId();",
									"    }",
									"});}",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb4b68a2-0dac-4124-9982-30afbbb79d8b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"id": "63959a78-82fd-41f1-96ec-065718483407"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "pass123*A",
				"type": "string"
			},
			{
				"key": "username",
				"value": "adminOne",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a239b4da-6483-4b86-9089-255c11dcebcb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bbc72c45-3db2-4ed2-bb76-a86483a75368",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "924b8d2a-7a7d-4643-9452-85705c49420d",
			"key": "password",
			"value": "123456*A"
		},
		{
			"id": "1142876e-d3f5-4d00-b516-b097e7c14455",
			"key": "baseurl",
			"value": "http://localhost:8081"
		},
		{
			"id": "f27ac98c-cb92-4307-baaf-035a7a564c64",
			"key": "email",
			"value": ""
		},
		{
			"id": "396086d5-fa2b-455c-a2fe-efcf8878aa3e",
			"key": "userID",
			"value": "41"
		},
		{
			"id": "5241724c-51a3-4fc9-a6f1-0fc40d7f5fcd",
			"key": "randomNumber",
			"value": ""
		},
		{
			"id": "04a1ae4f-b715-481f-9ef2-6aa62fe9e63f",
			"key": "userExpertise",
			"value": "",
			"type": "string"
		},
		{
			"id": "aa0cfff1-0409-40b8-8dff-0d3c642837d3",
			"key": "user_firstName",
			"value": ""
		},
		{
			"id": "9fb68072-1a81-40a9-9829-3ecdbd8aeedb",
			"key": "cityData",
			"value": "1,Sofia\n2,Plovdiv\n3,Varna\n4,Burgas\n5,Ruse\n6,Stara Zagora\n7,Pleven\n8,Sliven\n9,Dobrich\n10,Shumen\n11,Pernik\n12,Haskovo\n13,Vratsa\n14,Kyustendil\n15,Montana\n16,Lovech\n17,Razgrad\n18,Borino\n19,Madan\n20,Zlatograd\n21,Pazardzhik\n22,Smolyan\n23,Blagoevgrad\n24,Nedelino\n25,Rudozem\n26,Devin\n27,Veliko Tarnovo\n28,Vidin\n29,Kirkovo\n30,Krumovgrad\n31,Dzhebel\n32,Silistra\n33,Sarnitsa\n34,Shiroka Laka\n35,Yambol\n36,Dospat\n37,Kardzhali\n38,Gabrovo\n39,Targovishte\n",
			"type": "string"
		},
		{
			"id": "2e684d5e-fd80-4eed-92ad-9d6937381a1f",
			"key": "user_lastName",
			"value": ""
		},
		{
			"id": "9c4c68f8-ed9c-4ef9-96e7-b11d8c8d6616",
			"key": "city_name",
			"value": ""
		},
		{
			"id": "661ae2a0-695d-4e10-8d5d-9d03bf32840d",
			"key": "city_id",
			"value": ""
		},
		{
			"id": "a87722d4-db33-4e0e-9dbc-871037791676",
			"key": "user_birthDate",
			"value": ""
		},
		{
			"id": "15014ee9-abe7-4885-b8fc-349887680e82",
			"key": "user_fullName",
			"value": "",
			"type": "string"
		},
		{
			"id": "601ca404-3f68-4f66-97ef-15cd0e1ac5de",
			"key": "user_sex",
			"value": ""
		},
		{
			"id": "23d5e1fe-4c19-4eed-882e-dbfb33d3740f",
			"key": "user_picturePrivacy",
			"value": ""
		},
		{
			"id": "e50ed40f-ca51-494d-a236-7fa91206c40e",
			"key": "username",
			"value": ""
		},
		{
			"id": "dcdd43d1-7b60-411d-a209-4b838000b208",
			"key": "requestId",
			"value": ""
		},
		{
			"id": "77b94f3c-a1f2-4eaa-98c8-3746ee385d6c",
			"key": "senderUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "7ad6271f-0aa2-4368-a7dc-d667360d196b",
			"key": "recipientUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "3ff1718c-377e-4091-bcc9-cf9358b0d8af",
			"key": "deletePost",
			"value": ""
		},
		{
			"id": "db2abd80-0228-43f3-b882-af8946ed7985",
			"key": "newestPostId",
			"value": ""
		},
		{
			"id": "2d144682-c81a-4f46-86bb-cfba9349c202",
			"key": "authUser",
			"value": ""
		},
		{
			"id": "5ecfddef-ba3f-479b-8e8a-c8f05fa86278",
			"key": "hundred_symbols",
			"value": ""
		},
		{
			"id": "a050ee00-d9b0-407b-9ec1-7bceb0f96ad8",
			"key": "postCreate",
			"value": ""
		},
		{
			"id": "554e02fc-f9ac-4830-a0da-f5501b3a444c",
			"key": "getPost",
			"value": ""
		},
		{
			"id": "2c08a323-edbc-4218-8e22-41eb8fe08132",
			"key": "usertest1",
			"value": "testipthree",
			"type": "string"
		},
		{
			"id": "3bf7b5c5-47d5-4fd0-bdca-81ba1e1847d8",
			"key": "password1",
			"value": "Testipthree*1",
			"type": "string"
		},
		{
			"id": "fbee3566-842a-4d08-9ac6-c7764913d0b1",
			"key": "hundred_symbols_edited",
			"value": ""
		},
		{
			"id": "990037c2-4bec-41df-9af9-83eb374226ee",
			"key": "commentsCount",
			"value": ""
		},
		{
			"id": "c3359a5a-8f25-44f5-8a56-8dec60488ff6",
			"key": "findAllComments",
			"value": ""
		}
	]
}