{
	"info": {
		"_postman_id": "acae7899-1f57-4fc3-a4ca-72edf650b460",
		"name": "API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "18754403-acae7899-1f57-4fc3-a4ca-72edf650b460"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Register users",
							"item": [
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a5ddfa6-29e9-4e64-9c39-e82c0a9bb94b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "490834f1-d021-4e23-813c-8de829da9532",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69eceb57-8111-4172-a114-415caaa6aebc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user without expertise category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55311a62-48f6-4931-b5e7-9383ee284f36",
												"exec": [
													"pm.test(\"Status code is not 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a009ad6a-e7f9-4ce4-881b-3b519b081c22",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3a5b0813-5b48-4e25-bf52-5ef1a3b828fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1062b69-74ff-4b9e-8eee-2248a8011997",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is ADMIN\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_ADMIN', \"Expected user role to be 'ROLE_ADMIN', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ffca680-0659-47f0-888f-d296534d9241",
												"exec": [
													"var randomFirstName = pm.collectionVariables.replaceIn('{{$randomFirstName}}');",
													"randomFirstName = \"admin\" + randomFirstName;",
													"pm.collectionVariables.set(\"username\", randomFirstName);",
													"",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab32f658-2100-49e5-a3c5-504bf763747b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_ADMIN\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Authenticate user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dcd346f-b351-4e30-a101-d8f117c26bfb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "43618577-87f2-4989-9844-41f12907920e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseurl}}/authenticate",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"authenticate"
											]
										}
									},
									"response": []
								}
							],
							"id": "8bf5db1b-d739-4c3a-a859-b53203413191"
						},
						{
							"name": "Get user by ID, name or expertise",
							"item": [
								{
									"name": "Create user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e7619e4-d4c2-4232-bae8-0f8acd9b40a0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"        var expectedEmail = pm.collectionVariables.get(\"email\");",
													"        ",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"",
													"        pm.test(\"Emails should match\", function () {",
													"    pm.expect(responseData.email).to.eql(expectedEmail,  \"Email mismatch. Expected: \" + expectedEmail + \", Actual: \" + responseData.email);",
													"});",
													"",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83db1f20-2f66-453a-aec5-9eaf79da3c73",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bac8fc75-18ff-4e36-8e07-31de38966f80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4d8a725-4b68-4c96-ba50-18c2bd9e265e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"// Get the expected username, id and email value from the environment",
													"var expectedUsername = pm.collectionVariables.get(\"username\");",
													"var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"var expectedEmail = pm.collectionVariables.get(\"email\");",
													"",
													"var responseUsername = pm.response.json().username;",
													"var responseUserID = pm.response.json().id;",
													"var responseEmail = pm.response.json().email;",
													"",
													"// Check if the expected username matches the response username",
													"pm.test(\"Usernames should match\", function () {",
													"    pm.expect(responseUsername).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseUsername);",
													"});",
													"",
													"// Check if the expected id matches the response id",
													"pm.test(\"IDs should match\", function () {",
													"    pm.expect(responseUserID.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseUserID);",
													"});",
													"",
													"// Check if the expected email matches the response email",
													"pm.test(\"Emails should match\", function () {",
													"    pm.expect(responseEmail).to.eql(expectedEmail,  \"Email mismatch. Expected: \" + expectedEmail + \", Actual: \" + responseEmail);",
													"});",
													"",
													"var expertise = pm.response.json().expertise;",
													"pm.collectionVariables.set(\"userExpertise\", expertise);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1dfbeb0f-b0be-42be-ab7b-e3aa0dd8c384",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}?principal={{username}}",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}"
											],
											"query": [
												{
													"key": "principal",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user by expertise",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97c66175-0e31-4677-9ddd-cf96d19dcb86",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"var categoryName = pm.response.json()[0].expertiseProfile.category.name;",
													"",
													"var expectedCategoryName = pm.collectionVariables.get(\"userExpertise\");",
													"",
													"// Check if the \"expertise category\" name matches the \"userExpertise\" variable",
													"pm.test(\"Expertise category names should match.\", function () {",
													"    pm.expect(categoryName).to.equal(expectedCategoryName,  \"Expertise category names mismatch. Expected: \" + expectedCategoryName + \", Actual: \" + categoryName);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7e11d713-339c-4515-8d78-0cb127c9bbd4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"{{userExpertise}}\",\n  \"searchParam2\": \"\",\n  \"size\": 5\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's personal profile (add name)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44cc0546-7b10-4ff8-9616-bb1ed063bfa0",
												"exec": [
													"// To edit your own profile user must be authenticated",
													"// Define the form data",
													"const formData = {",
													"    username: pm.collectionVariables.get(\"username\"),",
													"",
													"    password: pm.collectionVariables.get(\"password\")",
													"};",
													"    console.log(formData);",
													"",
													"// Define the POST request configuration",
													"const postRequestConfig = {",
													"    method: 'POST',",
													"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"    header: 'Content-Type: application/x-www-form-urlencoded',",
													"    body: {",
													"        mode: 'formdata',",
													"        formdata: [",
													"            { key: 'username', value: formData.username },",
													"            { key: 'password', value: formData.password }",
													"        ]",
													"    }",
													"};",
													"",
													"// Send the POST request",
													"pm.sendRequest(postRequestConfig, function (err, response) {",
													"    console.log(response);",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"POST request failed\");",
													"        });",
													"    } ",
													"});",
													"",
													"",
													"",
													"// Generate a random birth date within a desired range",
													"function getRandomDate(minYear, maxYear) {",
													"    const year = Math.floor(Math.random() * (maxYear - minYear + 1)) + minYear;",
													"    const month = Math.floor(Math.random() * 12) + 1; // Months are 1-12",
													"    const day = Math.floor(Math.random() * 31) + 1; // Days are 1-31",
													"",
													"    // Ensure the day and month are formatted with leading zeros if needed",
													"    const formattedMonth = month.toString().padStart(2, '0');",
													"    const formattedDay = day.toString().padStart(2, '0');",
													"",
													"    return `${year}-${formattedMonth}-${formattedDay}`;",
													"}",
													"",
													"// Define the desired birth date range",
													"const minBirthYear = 1930;",
													"const maxBirthYear = 2008;",
													"",
													"// Generate a random birth date within the specified range",
													"const randomBirthDate = getRandomDate(minBirthYear, maxBirthYear);",
													"",
													"// Set the random birth date as a collection variable",
													"pm.collectionVariables.set(\"user_birthDate\", randomBirthDate);",
													"",
													"",
													"",
													"// Set random first and last name",
													"pm.collectionVariables.set(\"user_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"user_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"",
													"// Set random city",
													"// Parse the CSV content from the environment variable",
													"const cityCSV = pm.collectionVariables.get(\"cityData\").split('\\n');",
													"const randomIndex = Math.floor(Math.random() * (cityCSV.length - 1));",
													"",
													"// Select a random city and its ID",
													"const [cityId, cityName] = cityCSV[randomIndex].split(',');",
													"",
													"",
													"// Set the \"city\" and \"id\" variables in the request environment",
													"pm.collectionVariables.set(\"city_name\", cityName.trim());",
													"pm.collectionVariables.set(\"city_id\", parseInt(cityId));",
													"",
													"",
													"// Set either MALE or FEMALE as sex",
													"const sexes = [\"MALE\", \"FEMALE\"];",
													"",
													"// Generate a random index to select a value",
													"const index = Math.floor(Math.random() * sexes.length);",
													"",
													"// Get the random sex value",
													"const randomSex = sexes[index];",
													"",
													"// Set the random sex as a collection variable",
													"pm.collectionVariables.set(\"user_sex\", randomSex);",
													"",
													"// Set picture privacy",
													"// Generate a random boolean value (true or false)",
													"const randomBoolean = Math.random() < 0.5;",
													"",
													"// Set the random boolean value as a collection variable",
													"pm.collectionVariables.set(\"user_picturePrivacy\", randomBoolean);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1f7bf19a-2a14-4e5c-be51-e9cc5b7e7897",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, 'Expected 200');",
													"});",
													"",
													"pm.test(\"Check birthYear in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.birthYear).to.equal(pm.collectionVariables.get(\"user_birthDate\"));",
													"});",
													"",
													"pm.test(\"Check firstName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.firstName).to.equal(pm.collectionVariables.get(\"user_firstName\"));",
													"});",
													"",
													"pm.test(\"Check lastName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.lastName).to.equal(pm.collectionVariables.get(\"user_lastName\"));",
													"});",
													"",
													"pm.test(\"Check picturePrivacy in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    const expectedPicturePrivacy = pm.collectionVariables.get(\"user_picturePrivacy\"); ",
													"",
													"    pm.expect(responseJson.picturePrivacy).to.equal(expectedPicturePrivacy);",
													"});",
													"",
													"pm.test(\"Check sex in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.sex).to.equal(pm.collectionVariables.get(\"user_sex\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7bbbf860-abb5-460e-a1aa-c36e48e9ab5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthYear\": \"{{user_birthDate}}\",\n  \"firstName\": \"{{user_firstName}}\",\n  \"lastName\": \"{{user_lastName}}\",\n  \"location\": {\n    \"city\": {\n      \"city\": \"{{city_name}}\",\n      \"country\": {},\n      \"id\": {{city_id}}\n    }\n    ,\n    \"id\": 1\n  },\n  \"memberSince\": \"\",\n  \"personalReview\": \"\",\n  \"picture\": \"\",\n  \"picturePrivacy\": {{user_picturePrivacy}},\n  \"sex\": \"{{user_sex}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/personal",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"personal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edb6f2c4-d7d3-488c-b326-a04d3049f45d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.status(200);});",
													"",
													"        ",
													"        pm.test(\"User's first name is correct\", function () {",
													"        var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"        var responseData = response.json();",
													"        pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4443a3a-8bcc-4609-8347-1012a708b2dc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c2c5d899-3995-4f74-963e-41e3c1cb80cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_firstName}}\",\n  \"size\": 10\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users by full name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12cc95a2-5c72-442c-bd91-33b306694173",
												"exec": [
													"var fullName = pm.collectionVariables.get(\"user_firstName\") + \" \" + pm.collectionVariables.get(\"user_lastName\");",
													"",
													"pm.collectionVariables.set(\"user_fullName\", fullName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "beee86ba-b0d6-4b89-ac09-7b3000e53363",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"        ",
													"        pm.test(\"User's first name is correct\", function () {",
													"        var expectedFirstName = pm.collectionVariables.get(\"user_firstName\"); ",
													"        var responseData = response.json();",
													"        pm.expect(responseData.firstName).to.eql(expectedFirstName, \"Expected first name to be '\" + expectedFirstName + \"', but found '\" + responseData.firstName + \"'\");",
													"        });",
													"        pm.test(\"User's last name is correct\", function () {",
													"        var expectedLastName = pm.collectionVariables.get(\"user_lastName\"); ",
													"        var responseData = response.json();",
													"        pm.expect(responseData.lastName).to.equal(expectedLastName, \"Expected last name to be \" + expectedLastName + \", but found \" + responseData.lastName);",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8c7002d7-6b33-4dcb-bdc8-2c9ec81df909",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"{{user_fullName}}\",\n  \"size\": 1\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"id": "cca3011d-6d3f-42a2-b87d-fc23cad01dcc"
						},
						{
							"name": "Update user's profile information",
							"item": [
								{
									"name": "Register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "617f55e9-fb0f-45df-9856-931a48c6d6a9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
													"});",
													"",
													"",
													"const nameMatch = responseBody.match(/name (\\w+)/);",
													"const idMatch = responseBody.match(/id (\\d+)/);",
													"",
													"// Check if the matches were found and set them as collection variables",
													"if (nameMatch && idMatch) {",
													"    const name = nameMatch[1];",
													"    const id = idMatch[1];",
													"    ",
													"    pm.collectionVariables.set(\"username\", name);",
													"    pm.collectionVariables.set(\"userID\", id);",
													"}",
													"",
													"// Define the request configuration",
													"const getRequestConfig = {",
													"    method: 'GET',",
													"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
													"};",
													"",
													"// Send the GET request",
													"pm.sendRequest(getRequestConfig,  (err, response) => {",
													"    console.log(response.json());",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"GET request failed\");",
													"        });",
													"    } else {",
													"        // Validate the response",
													"        pm.test('response should be okay to process', () => {",
													"        pm.expect(response).to.have.property('code', 200);});",
													"",
													"        var responseData = response.json();",
													"        var expectedUsername = pm.collectionVariables.get(\"username\");",
													"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
													"",
													"        // Check if the expected username matches the response username",
													"        pm.test(\"Usernames should match\", function () {",
													"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
													"        });",
													"",
													"        // Check if the expected username matches the response id",
													"        pm.test(\"IDs should match\", function () {",
													"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
													"});",
													"        ",
													"        pm.test(\"User role is USER\", function () {",
													"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
													"    ",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50141f35-93c5-4aa4-aae2-7ba047e6bf53",
												"exec": [
													"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
													"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"",
													"const min = 100;",
													"const max = 157;",
													"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
													"",
													"// Set the random number as an environment variable",
													"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ff09864b-e66b-4b3b-8f3b-b2fe570e582c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's personal profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44cc0546-7b10-4ff8-9616-bb1ed063bfa0",
												"exec": [
													"// To edit your own profile user must be authenticated",
													"// Define the form data",
													"const formData = {",
													"    username: pm.collectionVariables.get(\"username\"),",
													"",
													"    password: pm.collectionVariables.get(\"password\")",
													"};",
													"    console.log(formData);",
													"",
													"// Define the POST request configuration",
													"const postRequestConfig = {",
													"    method: 'POST',",
													"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
													"    header: 'Content-Type: application/x-www-form-urlencoded',",
													"    body: {",
													"        mode: 'formdata',",
													"        formdata: [",
													"            { key: 'username', value: formData.username },",
													"            { key: 'password', value: formData.password }",
													"        ]",
													"    }",
													"};",
													"",
													"// Send the POST request",
													"pm.sendRequest(postRequestConfig, function (err, response) {",
													"    console.log(response);",
													"    if (err) {",
													"        console.error(err);",
													"        pm.test(\"Request failed\", function () {",
													"            pm.expect.fail(\"POST request failed\");",
													"        });",
													"    } ",
													"});",
													"",
													"",
													"",
													"// Generate a random birth date within a desired range",
													"function getRandomDate(minYear, maxYear) {",
													"    const year = Math.floor(Math.random() * (maxYear - minYear + 1)) + minYear;",
													"    const month = Math.floor(Math.random() * 12) + 1; // Months are 1-12",
													"    const day = Math.floor(Math.random() * 31) + 1; // Days are 1-31",
													"",
													"    // Ensure the day and month are formatted with leading zeros if needed",
													"    const formattedMonth = month.toString().padStart(2, '0');",
													"    const formattedDay = day.toString().padStart(2, '0');",
													"",
													"    return `${year}-${formattedMonth}-${formattedDay}`;",
													"}",
													"",
													"// Define the desired birth date range (adjust as needed)",
													"const minBirthYear = 1930;",
													"const maxBirthYear = 2008;",
													"",
													"// Generate a random birth date within the specified range",
													"const randomBirthDate = getRandomDate(minBirthYear, maxBirthYear);",
													"",
													"// Set the random birth date as a collection variable",
													"pm.collectionVariables.set(\"user_birthDate\", randomBirthDate);",
													"",
													"",
													"",
													"// Set random first and last name",
													"pm.collectionVariables.set(\"user_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.collectionVariables.set(\"user_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"",
													"// Set random city",
													"// Parse the CSV content from the environment variable",
													"const cityCSV = pm.collectionVariables.get(\"cityData\").split('\\n');",
													"const randomIndex = Math.floor(Math.random() * cityCSV.length);",
													"",
													"// Select a random city and its ID",
													"const [cityId, cityName] = cityCSV[randomIndex].split(',');",
													"",
													"",
													"// Set the \"city\" and \"id\" variables in the request environment",
													"pm.collectionVariables.set(\"city_name\", cityName.trim());",
													"pm.collectionVariables.set(\"city_id\", parseInt(cityId));",
													"",
													"",
													"// Set either MALE or FEMALE as sex",
													"const sexes = [\"MALE\", \"FEMALE\"];",
													"",
													"// Generate a random index to select a value",
													"const index = Math.floor(Math.random() * sexes.length);",
													"",
													"// Get the random sex value",
													"const randomSex = sexes[index];",
													"",
													"// Set the random sex as a collection variable",
													"pm.collectionVariables.set(\"user_sex\", randomSex);",
													"",
													"// Set picture privacy",
													"// Generate a random boolean value (true or false)",
													"const randomBoolean = Math.random() < 0.5;",
													"",
													"// Set the random boolean value as a collection variable",
													"pm.collectionVariables.set(\"user_picturePrivacy\", randomBoolean);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1f7bf19a-2a14-4e5c-be51-e9cc5b7e7897",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200, 'Expected 200');",
													"});",
													"",
													"pm.test(\"Check birthYear in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.birthYear).to.equal(pm.collectionVariables.get(\"user_birthDate\"));",
													"});",
													"",
													"pm.test(\"Check firstName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.firstName).to.equal(pm.collectionVariables.get(\"user_firstName\"));",
													"});",
													"",
													"pm.test(\"Check lastName in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.lastName).to.equal(pm.collectionVariables.get(\"user_lastName\"));",
													"});",
													"",
													"pm.test(\"Check picturePrivacy in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    const expectedPicturePrivacy = pm.collectionVariables.get(\"user_picturePrivacy\"); ",
													"",
													"    pm.expect(responseJson.picturePrivacy).to.equal(expectedPicturePrivacy);",
													"});",
													"",
													"pm.test(\"Check sex in response\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.sex).to.equal(pm.collectionVariables.get(\"user_sex\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8d815b4-6740-4435-a7f0-678a16cd09f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"birthYear\": \"{{user_birthDate}}\",\n  \"firstName\": \"{{user_firstName}}\",\n  \"lastName\": \"{{user_lastName}}\",\n  \"location\": {\n    \"city\": {\n      \"city\": \"{{city_name}}\",\n      \"country\": {},\n      \"id\": {{city_id}}\n    }\n    ,\n    \"id\": 1\n  },\n  \"memberSince\": \"\",\n  \"personalReview\": \"\",\n  \"picture\": \"\",\n  \"picturePrivacy\": {{user_picturePrivacy}},\n  \"sex\": \"{{user_sex}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/personal",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"personal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user's expertise profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f5055629-2965-4627-8075-e9295d87085f",
												"exec": [
													"pm.collectionVariables.set(\"skill1\", pm.variables.replaceIn('{{$randomWord}}'));",
													"pm.collectionVariables.set(\"skill2\", pm.variables.replaceIn('{{$randomWord}}'));",
													"pm.collectionVariables.set(\"skill3\", pm.variables.replaceIn('{{$randomWord}}'));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97ebcb11-392e-4738-8800-888df287a5d8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Skills Exist in Response\", function () {",
													"    var requestSkills = [pm.variables.get(\"skill1\"), pm.variables.get(\"skill2\"), pm.variables.get(\"skill3\")];",
													"    var responseSkills = pm.response.json().skills.map(skill => skill.skill);",
													"",
													"    _.each(requestSkills, function (reqSkill) {",
													"        pm.expect(responseSkills).to.include(reqSkill);",
													"    });",
													"});",
													"",
													"pm.test(\"Matching Category Name\", function () {",
													"    var responseCategoryName = pm.response.json().category.name;",
													"",
													"    pm.expect(responseCategoryName).to.equal(pm.collectionVariables.get('userExpertise'));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8ff20841-aa33-4240-aed4-a1a471af1100",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"availability\": 1,\n  \"category\": {\n    \"name\": \"{{userExpertise}}\"\n  },\n//   \"id\": 0,\n  \"skills\":[\n        \"{{skill1}}\", \"{{skill2}}\", \"{{skill3}}\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl}}/api/users/auth/{{userID}}/expertise?name={{username}}",
											"host": [
												"{{baseurl}}"
											],
											"path": [
												"api",
												"users",
												"auth",
												"{{userID}}",
												"expertise"
											],
											"query": [
												{
													"key": "name",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "2c55d03c-65eb-40ef-a050-617d0781cadb"
						}
					],
					"id": "e2395516-04d4-4859-9779-28635e1aa465"
				},
				{
					"name": "Connection requests",
					"item": [
						{
							"name": "Register user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc810a68-067e-4123-9b1d-7b7c4a5306a5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"senderUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3030ac30-1f65-4562-9019-44e9790f6e75",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "51e2fb38-0ac7-4580-860b-46ca9b709294",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5dc28c9-3556-471d-8d77-860cf53c618b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6e37d9ba-f1a1-43d9-b190-cc9a1c3b8700",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "909753cb-71f5-48f2-ae87-522a24ea32ab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"",
											"const nameMatch = responseBody.match(/name (\\w+)/);",
											"const idMatch = responseBody.match(/id (\\d+)/);",
											"",
											"// Check if the matches were found and set them as collection variables",
											"if (nameMatch && idMatch) {",
											"    const name = nameMatch[1];",
											"    const id = idMatch[1];",
											"    ",
											"    pm.collectionVariables.set(\"recipientUsername\", name);",
											"    pm.collectionVariables.set(\"userID\", id);",
											"}",
											"",
											"// Define the request configuration",
											"const getRequestConfig = {",
											"    method: 'GET',",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/users/auth/${pm.collectionVariables.get('userID')}?principal=${pm.collectionVariables.get('username')}`,",
											"};",
											"",
											"// Send the GET request",
											"pm.sendRequest(getRequestConfig,  (err, response) => {",
											"    console.log(response.json());",
											"    if (err) {",
											"        console.error(err);",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"GET request failed\");",
											"        });",
											"    } else {",
											"        // Validate the response",
											"        pm.test('response should be okay to process', () => {",
											"        pm.expect(response).to.have.property('code', 200);});",
											"",
											"        var responseData = response.json();",
											"        var expectedUsername = pm.collectionVariables.get(\"username\");",
											"        var expectedUserID = pm.collectionVariables.get(\"userID\");",
											"",
											"        // Check if the expected username matches the response username",
											"        pm.test(\"Usernames should match\", function () {",
											"        pm.expect(responseData.username).to.eql(expectedUsername, \"Username mismatch. Expected: \" + expectedUsername + \", Actual: \" + responseData.username);",
											"        });",
											"",
											"        // Check if the expected username matches the response id",
											"        pm.test(\"IDs should match\", function () {",
											"        pm.expect(responseData.id.toString()).to.eql(expectedUserID,  \"ID mismatch. Expected: \" + expectedUserID + \", Actual: \" + responseData.id);",
											"});",
											"        ",
											"        pm.test(\"User role is USER\", function () {",
											"        pm.expect(responseData.authorities).to.include('ROLE_USER', \"Expected user role to be 'ROLE_USER', but found '\" + responseData.authorities + \"'\");",
											"    ",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48b0697c-fbad-4cd9-a829-f8b46af1c20a",
										"exec": [
											"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
											"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
											"",
											"const min = 100;",
											"const max = 157;",
											"const randomNumForCategory = Math.floor(Math.random() * (max - min + 1)) + min;",
											"",
											"// Set the random number as an environment variable",
											"pm.collectionVariables.set(\"randomNumber\", randomNumForCategory);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "618378c9-5673-458d-8d77-4f8f93211d42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"authorities\": [\n    \"ROLE_USER\"\n  ],\n      \"category\": {\n    \"id\": {{randomNumber}}\n  },\n  \"confirmPassword\": \"{{password}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/users/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "User A sends connection request to user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78428e68-13a2-4865-a99d-940bb4a88abf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    const expectedSender = pm.collectionVariables.get('senderUsername');",
											"    const expectedRecipient = pm.collectionVariables.get('recipientUsername');",
											"",
											"    // Extract the response text",
											"    const responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ffbc11bd-13f3-40b6-a30a-cbb1114f453f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": {{userID}},\n  \"username\": \"{{username}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/auth/request",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate user B",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "583bc49c-84fe-4204-85e9-31ee6dd5da11",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5c5e434d-5f8c-4c15-933a-592adfdc1521",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ca0ad4e-2ff1-4295-893d-78d6626f4dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Approved status is false\", function () {",
											"    // Extract the response data as JSON",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the \"approved\" status",
											"    pm.expect(firstObject.approved, \"Expected 'approved' status to be false\").to.equal(false);",
											"});",
											"",
											"pm.test(\"Response has 'receiver' and 'sender'\", function () {",
											"    const responseData = pm.response.json();",
											"    const firstObject = responseData[0];",
											"",
											"    // Validate the presence of 'receiver' and 'sender' fields",
											"    pm.expect(firstObject).to.have.property(\"receiver\", \"Response should have 'receiver' field\");",
											"    pm.expect(firstObject).to.have.property(\"sender\", \"Response should have 'sender' field\");",
											"});",
											"",
											"",
											"const responseData = pm.response.json();",
											"const requestId = parseInt(responseData[0].id, 10);",
											"",
											"// Set the ID as a collection variable",
											"pm.collectionVariables.set(\"requestId\", requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e351504a-cc11-4c21-8f04-305caeb736c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve connection request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d96bf756-87b8-4d24-9e14-1ab6df0d84d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response includes two usernames\", function () {",
											"    // Define the expected usernames",
											"    var expectedSender = pm.collectionVariables.get('senderUsername');",
											"    var expectedRecipient = pm.collectionVariables.get('recipientUsername');",
											"",
											"    var responseText = pm.response.text();",
											"",
											"    // Check if both usernames are present in the response",
											"    pm.expect(responseText).to.include(expectedSender);",
											"    pm.expect(responseText).to.include(expectedRecipient);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "051e0e9c-d2df-4779-80db-fa43932626d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/approve?requestId={{requestId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										"approve"
									],
									"query": [
										{
											"key": "requestId",
											"value": "{{requestId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get connection request by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0651fff8-384d-40c7-bd69-78693331607b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, \"Expected status code to be 200 OK\");",
											"});",
											"",
											"pm.test(\"Response is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    // Check if the response data is an array and is empty",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.be.empty;",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8985bea0-5949-4460-a50c-1c62497c63e1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/auth/users/{{userID}}/request/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"auth",
										"users",
										"{{userID}}",
										"request",
										""
									]
								}
							},
							"response": []
						}
					],
					"id": "9d6e177e-e6ef-4043-a01d-77fc2443ecb7"
				}
			],
			"id": "bac65b08-059f-4451-8dd3-4ac893787f13"
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Authenticate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dcd346f-b351-4e30-a101-d8f117c26bfb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f312553b-0115-4163-8b89-02ea2a429b29",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create post",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40a34e94-f763-4f61-82bd-8a93eb85a5ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Id in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.postId).to.not.null;\r",
											"});\r",
											"pm.test(\"Content in response\", function () {\r",
											"    var postcontent= pm.collectionVariables.get('hundred_symbols');\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.content).to.equal(postcontent);\r",
											"});\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"\r",
											"// Extract the ID of the newest post\r",
											"var newestPostId = parseInt(responseJson.postId);\r",
											"console.log(newestPostId);\r",
											"\r",
											"// Log the ID of the newest post\r",
											"console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"// You can also set a Postman environment variable with the result\r",
											"pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.collectionVariables.set(\"postCreate\", pm.request);\r",
											"\r",
											"\r",
											"// pm.sendRequest({\r",
											"//     url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"//     method: 'DELETE',\r",
											"//     header:{\r",
											"//         'Content-Type':'application/json',\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc8ae6c2-bc32-434c-85e3-9deb29c1689f",
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"authUser\"));\r",
											"\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(34).fill('xo ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols', hundredSymbols);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3a612708-e149-4f64-b756-1bc433584e38",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "01b09295-d4a3-49fd-b394-e4eccabfca5b",
										"exec": [
											"\r",
											"// const formData = {\r",
											"//     username: pm.collectionVariables.get('username'),\r",
											"//     password: pm.collectionVariables.get('password')\r",
											"// };\r",
											"//     console.log(formData);\r",
											"\r",
											"// // Define the POST request configuration\r",
											"// const postRequestConfig = {\r",
											"//     method: 'POST',\r",
											"//     url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"//     header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"//     body: {\r",
											"//         mode: 'formdata',\r",
											"//         formdata: [\r",
											"//             { key: 'username', value: formData.username },\r",
											"//             { key: 'password', value: formData.password }\r",
											"//         ]\r",
											"//     }\r",
											"// };\r",
											"\r",
											"// pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"//     if (err) {\r",
											"//         console.error(err);\r",
											"//         // Handle the error if needed\r",
											"//     } else {\r",
											"//         var jsonData = response.json();\r",
											"//         console.log(jsonData);\r",
											"\r",
											"//         // Access the response JSON directly\r",
											"//         var responseJson = response.json();\r",
											"\r",
											"//         // Extract the ID of the newest post\r",
											"//         var newestPostId = responseJson.postId;\r",
											"\r",
											"//         // Log the ID of the newest post\r",
											"//         console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"//         // You can also set a Postman environment variable with the result\r",
											"//         pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"//     }\r",
											"// });\r",
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('edited ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_edited', hundredSymbols);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ad260945-abe1-4bf9-833d-1d6b88bb0d8f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.get('baseurl') + '/api/post/',\r",
											"    method: 'GET',\r",
											"    }, function (error, response) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"\r",
											"var response = response.json();\r",
											"\r",
											"console.log(response[0].postId);\r",
											"    pm.test(\"Matching Post ID\", function () {\r",
											"        pm.expect(response[0].postId).to.eql(pm.collectionVariables.get('newestPostId'));\r",
											"    });\r",
											"\r",
											"    pm.test(\"Matching Post Content\", function () {\r",
											"        pm.expect(response[0].content).to.eql(pm.collectionVariables.get('hundred_symbols_edited'));\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b00d074-4189-4240-830d-ce4ea466031e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{hundred_symbols_edited}}\",\r\n  \"picture\": \"https://content.api.news/v3/images/bin/eb46d3099a5f3b45b4b1b0f4deae1d0a\",\r\n  \"public\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/post/auth/editor?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "name",
											"value": "{{username}}",
											"disabled": true
										},
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b32b9a4c-4edf-4edd-af4c-9c43fb4d7add",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Access the response JSON directly\r",
											"var response = pm.response.json();\r",
											"\r",
											"var responsePostId = response[0].postId;\r",
											"console.log(responsePostId);\r",
											"\r",
											"// Compare 'newestPostId' with 'postId'\r",
											"pm.test(\"Check if newestPostId matches postId\", function() {\r",
											"    pm.expect(pm.collectionVariables.get('newestPostId')).to.equal(responsePostId, \"newestPostId does not match postId. Newest: \" + pm.collectionVariables.get('newestPostId') + \", Post: \" + responsePostId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23bed68d-6463-4dd9-b7f0-40defe4be48c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5f7f6ebc-781c-444f-b211-ba131c22801e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc41de6c-3f70-4a1d-a58d-e8f46865859d",
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "465eb436-d207-43aa-90ea-e5fc1ed83a5d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var deletedPostId=pm.collectionVariables.get('newestPostId');\r",
											"\r",
											"pm.sendRequest({\r",
											"       url: `${pm.collectionVariables.get('baseurl')}/api/post/}`,\r",
											"    method: 'GET',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"}, function(err,response){\r",
											"    if (err){\r",
											"        console.error(err);\r",
											"    } else{\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);  \r",
											"\r",
											"        var newestPostId = jsonData.postId;\r",
											"\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"\r",
											"pm.test(\"Post is deleted\", function () {\r",
											"    pm.expect(jsonData.postId).to.not.equal(deletedPostId);\r",
											"});\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"deletePost\", pm.request)"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9e94b341-38f7-48dc-a09e-eb19578c896e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/manager?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "92d33ffb-bd5e-4ed8-8639-56a0b1f572aa"
				},
				{
					"name": "Like a Post",
					"item": [
						{
							"name": "Authenticate user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dcd346f-b351-4e30-a101-d8f117c26bfb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf4e3b69-9045-4ef4-91bd-abbcfe8b5955",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fd7789e-edd3-4eb5-8a8b-c8d06087e24b",
										"exec": [
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"    console.log(formData);\r",
											"\r",
											"// Define the POST request configuration\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"newestPostId\", newestPostId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2d25aa4-7ba6-43e2-9497-e879c453779c",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Id in response\", function () {\r",
											"            pm.expect(jsonData.postId).to.not.null;\r",
											"        });\r",
											"pm.test(\"User expected to have liked the comment one from the test\", function() {\r",
											"    pm.expect(jsonData.likes[0].username).to.equal(pm.collectionVariables.get('username'))\r",
											"});\r",
											"\r",
											"var newestPostId = pm.collectionVariables.get('newestPostId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?postId=${newestPostId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ec45d87d-647d-4aa3-9b88-e3f74d3ba7a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/post/auth/likesUp?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"post",
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cc7349cd-c372-437d-81c2-eaa9168c190c"
				}
			],
			"id": "f2f5414e-3a64-48bf-adea-c4512b0b1878"
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0de6f6bf-35f4-476b-acf1-a7c79bf0e00c",
										"exec": [
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_comment', hundredSymbols);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequestConfig, function (err, response) {\r",
											"if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        findallComments();\r",
											"        createPost();\r",
											"    }\r",
											"});\r",
											"\r",
											"// findallComments();\r",
											"\r",
											"function findallComments() {pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The current comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"previousCommentsCount\", commentsCount);\r",
											"\r",
											"    }\r",
											"});}\r",
											"\r",
											"function createPost() {pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestPostId\", newestPostId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"        console.log(pm.collectionVariables.get(\"userID\"));\r",
											"        console.log(pm.collectionVariables.get(\"newestPostId\"));\r",
											"    }\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b12d81bc-5c3c-4f31-a516-28ca64ca10c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"var commentsCountPrevious = pm.collectionVariables.get(\"commentsCount\");\r",
											"console.log(\"Previous comments count after comment creation: \" + commentsCountPrevious);\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"getAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The new comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setCommentsCommentsCount() {pm.collectionVariables.set(\"commentsCount\", commentsCount);}\r",
											"        setCommentsCommentsCount();\r",
											"\r",
											"        pm.test(\"Comments count is updated\", function () {\r",
											"            pm.expect(pm.collectionVariables.get(\"previousCommentsCount\") + 1).to.eql(commentsCount);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"newestCommentId\", pm.response.json().commentId);\r",
											"pm.collectionVariables.set(\"commentCreate\", pm.request);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "68dbc50b-87eb-4d14-b333-8056b541def8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"{{hundred_symbols_comment}}\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{newestPostId}},\r\n  \"userId\": {{userID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf60b945-4dec-48df-9060-eee5e7996712",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "14db6032-a337-45f9-b3a0-7c72889e83a8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    \r",
											"    pm.expect(Array.isArray(responseBody)).to.be.true;\r",
											"});\r",
											"\r",
											"var commentsCount = responseBody.length;\r",
											"pm.collectionVariables.set(\"commentsCount\", commentsCount);\r",
											"pm.collectionVariables.set(\"getAllComments\", pm.request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d1332629-9040-45f1-83ee-483763fbcd83",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comment by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dea11c61-2498-461a-9ff5-e8424e2ef247",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"pm.test(\"Comment Ids match.\", function () {",
											"    pm.expect(responseBody.commentId).to.eql(pm.collectionVariables.get('newestCommentId'), \"IDs of comments do not match.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d3f9fe95-d97e-44a1-b34f-ae7640a70e7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment/single?commentId={{newestCommentId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"single"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comment by Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30ff21d9-97c8-42fd-a420-bf5d0be11cea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an array\", function () {",
											"    // Parse the response JSON",
											"    var responseBody = pm.response.json();",
											"    ",
											"    // Check if the response is an array",
											"    pm.expect(Array.isArray(responseBody)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "be77b72c-64d0-489b-84ba-de5ed2af8d02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment/byPost?postId={{newestPostId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"byPost"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{newestPostId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73743a7e-06c8-45b4-849d-1ccd6b167b26",
										"exec": [
											"const hundredSymbolsEditComment = Array(7).fill('edited comment').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_edited_comment', hundredSymbolsEditComment);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequestConfig, function (err, response) {\r",
											"    createPost();\r",
											"    createComment();\r",
											"});\r",
											"\r",
											"function createComment() {pm.sendRequest(pm.collectionVariables.get(\"commentCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestCommentId = responseJson.commentId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the comment with the newest date is: \" + newestCommentId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestCommentId\", newestCommentId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"    }\r",
											"});}\r",
											"\r",
											"function createPost() {pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestPostId\", newestPostId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"    }\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f631590e-680f-4c74-a91c-6f0311b656a8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (error, response) {\r",
											"    if (error) {\r",
											"        pm.test(\"Request failed\", function () {\r",
											"            pm.expect.fail(\"Request failed\");\r",
											"        });\r",
											"        return;\r",
											"    } \r",
											"\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.expect(response).to.have.status(200);\r",
											"    });\r",
											"\r",
											"    var comments = response.json();\r",
											"    console.log(comments);\r",
											"\r",
											"    var foundComment = comments.find( comment => comment.commentId === pm.collectionVariables.get('newestCommentId'));\r",
											"\r",
											"    var commentContent = pm.collectionVariables.get('hundred_symbols_edited_comment');\r",
											"    pm.test(\"Content in response\", function () {\r",
											"        pm.expect(foundComment.content).to.eql(commentContent);\r",
											"    });\r",
											"});\r",
											"\r",
											"var newestCommentId = pm.collectionVariables.get('newestCommentId');\r",
											"pm.sendRequest({\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?commentId=${newestCommentId}`,\r",
											"    method: 'DELETE',\r",
											"    header:{\r",
											"        'Content-Type':'application/json',\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "64ef4af3-6319-4d75-82e1-37f1e75a2520",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/editor?commentId={{newestCommentId}}&content={{hundred_symbols_edited_comment}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										},
										{
											"key": "content",
											"value": "{{hundred_symbols_edited_comment}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7abee19c-a7b3-437e-a201-067547bdd3c3",
										"exec": [
											"\r",
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_comment', hundredSymbols);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequestConfig, function (err, response) {\r",
											"    createComment();\r",
											"});\r",
											"\r",
											"function findAllComments() {\r",
											"    pm.sendRequest(pm.collectionVariables.get(\"getAllComments\"), function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            // Handle the error if needed\r",
											"        } else {\r",
											"            // Access the response JSON directly\r",
											"            var responseJson = response.json();\r",
											"\r",
											"            // count elements in array\r",
											"            var commentsCount = responseJson.length;\r",
											"\r",
											"            console.log(\"The current comments count is \" + commentsCount);\r",
											"\r",
											"            pm.collectionVariables.set(\"previousCommentsCount\", commentsCount);\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"function createComment() {\r",
											"    pm.sendRequest(pm.collectionVariables.get(\"commentCreate\"), function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            // Handle the error if needed\r",
											"        } else {\r",
											"            var jsonData = response.json();\r",
											"            console.log(jsonData);\r",
											"\r",
											"            // Access the response JSON directly\r",
											"            var responseJson = response.json();\r",
											"\r",
											"            // Extract the ID of the newest post\r",
											"            var newestCommentId = responseJson.commentId;\r",
											"\r",
											"            // Log the ID of; the newest post\r",
											"            console.log(\"The ID of the comment with the newest date is: \" + newestCommentId);\r",
											"\r",
											"            pm.collectionVariables.set(\"newestCommentId\", newestCommentId);            \r",
											"            findAllComments();\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f81e42c-00d2-48f3-8fee-b92c1d08b3e3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var commentsCountPrevious = pm.collectionVariables.get(\"previousCommentsCount\");\r",
											"console.log(\"Previous comments count after comment creation: \" + commentsCountPrevious);\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"getAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    } else {\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The new comments count is \" + commentsCount);\r",
											"\r",
											"        pm.test(\"Comments count is updated\", function () {\r",
											"            pm.expect(commentsCount+1).to.eql(commentsCountPrevious);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"// pm.collectionVariables.set(\"newestCommentId\", pm.response.json().commentId);\r",
											"// pm.collectionVariables.set(\"commentCreate\", pm.request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cfd63d29-4c07-4736-9f1c-f13e4346f9a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/manager?commentId={{newestCommentId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b530b28c-dc29-4b21-ac84-fe2108536875",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7960ccd0-e6d3-4b2a-8b47-5ff8419db615",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"// pm.sendRequest(pm.collectionVariables.get(\"registerUser\"), function (err, response) {",
									"// if (err) {",
									"//         console.error(err);",
									"//         // Handle the error if needed",
									"//     } else {",
									"//         var jsonData = response.json();",
									"//         console.log(jsonData.body);",
									"",
									"//     const formData = {",
									"//     username: pm.collectionVariables.get('username'),",
									"//     password: pm.collectionVariables.get('password')};",
									"",
									"// // Define the POST request configuration",
									"// const postRequestConfig = {",
									"//     method: 'POST',",
									"//     url: `${pm.collectionVariables.get('baseurl')}/authenticate`,",
									"//     header: 'Content-Type: application/x-www-form-urlencoded',",
									"//     body: {",
									"//         mode: 'formdata',",
									"//         formdata: [",
									"//             { key: 'username', value: formData.username },",
									"//             { key: 'password', value: formData.password }",
									"//         ]",
									"//     }",
									"// };",
									"",
									"//         pm.sendRequest(postRequestConfig);",
									"//         createPost();",
									"",
									"//     }",
									"// });",
									"",
									"// function authenticateUser() {pm.sendRequest(collectionVariables.get(\"authUser\"));}",
									"",
									"// function createPost() {pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {",
									"//     if (err) {",
									"//         console.error(err);",
									"//         // Handle the error if needed",
									"//     } else {",
									"//         var jsonData = response.json();",
									"//         console.log(jsonData);",
									"",
									"//         // Access the response JSON directly",
									"//         var responseJson = response.json();",
									"",
									"//         // Extract the ID of the newest post",
									"//         var newestPostId = responseJson.postId;",
									"",
									"//         // Log the ID of; the newest post",
									"//         console.log(\"The ID of the post with the newest date is: \" + newestPostId);",
									"",
									"//         // You can also set a Postman environment variable with the result",
									"//         function setNewestPostId() {pm.collectionVariables.set(\"newestPostId\", newestPostId);}",
									"//         function setNewestCommentPostId() {pm.collectionVariables.set(\"commentCreatedPostId\", newestPostId);}",
									"//         setNewestPostId();",
									"//         setNewestCommentPostId();",
									"//     }",
									"// });}",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0258a7e-7212-4ffd-9908-6304ceecd8b9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Like a comment",
					"item": [
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0de6f6bf-35f4-476b-acf1-a7c79bf0e00c",
										"exec": [
											"// create 100 symbols message\r",
											"const hundredSymbols = Array(14).fill('comment ').join('');\r",
											"pm.collectionVariables.set('hundred_symbols_comment', hundredSymbols);\r",
											"\r",
											"const formData = {\r",
											"    username: pm.collectionVariables.get('username'),\r",
											"    password: pm.collectionVariables.get('password')\r",
											"};\r",
											"const postRequestConfig = {\r",
											"    method: 'POST',\r",
											"    url: `${pm.collectionVariables.get('baseurl')}/authenticate`,\r",
											"    header: 'Content-Type: application/x-www-form-urlencoded',\r",
											"    body: {\r",
											"        mode: 'formdata',\r",
											"        formdata: [\r",
											"            { key: 'username', value: formData.username },\r",
											"            { key: 'password', value: formData.password }\r",
											"        ]\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(postRequestConfig, function (err, response) {\r",
											"if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        findallComments();\r",
											"    }\r",
											"});\r",
											"\r",
											"// findallComments();\r",
											"\r",
											"function findallComments() {pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The current comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        pm.collectionVariables.set(\"previousCommentsCount\", commentsCount);\r",
											"        createPost();\r",
											"    }\r",
											"});}\r",
											"\r",
											"function createPost() {pm.sendRequest(pm.collectionVariables.get(\"postCreate\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var newestPostId = responseJson.postId;\r",
											"\r",
											"        // Log the ID of; the newest post\r",
											"        console.log(\"The ID of the post with the newest date is: \" + newestPostId);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setNewestCommentId() {pm.collectionVariables.set(\"newestPostId\", newestPostId);}\r",
											"        \r",
											"        setNewestCommentId();\r",
											"    }\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b12d81bc-5c3c-4f31-a516-28ca64ca10c1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"var commentsCountPrevious = pm.collectionVariables.get(\"commentsCount\");\r",
											"console.log(\"Previous comments count after comment creation: \" + commentsCountPrevious);\r",
											"\r",
											"pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"        // Handle the error if needed\r",
											"    } else {\r",
											"        var jsonData = response.json();\r",
											"        console.log(jsonData);\r",
											"\r",
											"        // Access the response JSON directly\r",
											"        var responseJson = response.json();\r",
											"\r",
											"        // Extract the ID of the newest post\r",
											"        var commentsCount = responseJson.length;\r",
											"\r",
											"        // Log the ID of the newest post\r",
											"        console.log(\"The new comments count is \" + commentsCount);\r",
											"\r",
											"        // You can also set a Postman environment variable with the result\r",
											"        function setCommentsCommentsCount() {pm.collectionVariables.set(\"commentsCount\", commentsCount);}\r",
											"        setCommentsCommentsCount();\r",
											"\r",
											"        pm.test(\"Comments count is updated\", function () {\r",
											"            pm.expect(pm.collectionVariables.get(\"previousCommentsCount\") + 1).to.eql(commentsCount);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"pm.collectionVariables.set(\"newestCommentId\", pm.response.json().commentId);\r",
											"pm.collectionVariables.set(\"commentCreate\", pm.request);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b957e335-53ef-4eda-a24d-e57a17681abf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"{{hundred_symbols_comment}}\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": {{newestPostId}},\r\n  \"userId\": {{userID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/creator",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like a comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "295577d6-226b-4ba1-84c5-6b51e1d46a6d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Liked Field should be true\", function () {",
											"    var likedValue = pm.response.json().liked;",
											"    pm.expect(likedValue).to.be.true;",
											"});",
											"",
											"// var responseBody = response.json();",
											"pm.test(\"Likes have increased by 1\", function () {",
											"    pm.expect(pm.response.json().likes.length).to.be.eql(pm.collectionVariables.get('commentLikes')+1);",
											"});",
											"",
											"var newestCommentId = pm.collectionVariables.get('newestCommentId');",
											"pm.sendRequest({",
											"    url: `${pm.collectionVariables.get('baseurl')}/api/post/auth/manager?commentId=${newestCommentId}`,",
											"    method: 'DELETE',",
											"    header:{",
											"        'Content-Type':'application/json',",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb37523d-dc20-4ebf-b5b7-1214eda26b0c",
										"exec": [
											"pm.sendRequest(pm.collectionVariables.get(\"findAllComments\"), function (error, response) {",
											"    if (error) {",
											"        pm.test(\"Request failed\", function () {",
											"            pm.expect.fail(\"Request failed\");",
											"        });",
											"        return;",
											"    } ",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.expect(response).to.have.status(200);",
											"    });",
											"",
											"    var comments = response.json();",
											"",
											"    var foundComment = comments.find( comment => comment.commentId === pm.collectionVariables.get('newestCommentId'));",
											"",
											"    pm.collectionVariables.set(\"commentLikes\", foundComment.likes.length);",
											"    console.log(foundComment.likes.length);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ccfca7bd-24d3-48f5-ae8d-471b392a1251",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/comment/auth/likesUp?commentId={{newestCommentId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"comment",
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{newestCommentId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0f7c1a29-294e-4554-9988-9d7e3268d984"
				}
			],
			"id": "38039d88-1591-4e5a-b748-6f746e833f03"
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "pass123*A",
				"type": "string"
			},
			{
				"key": "username",
				"value": "adminOne",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ff595851-942b-4f71-bc6f-53ce72701ffc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1d5a88a3-1dea-46cd-a2e1-7e7fe11609ee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "83fddebb-1479-4512-a927-e3311150db62",
			"key": "baseurl",
			"value": "http://84.21.205.241:8081"
		},
		{
			"id": "d36c3b39-df48-4c24-9ebd-332034c4dfc4",
			"key": "username",
			"value": ""
		},
		{
			"id": "c0609dbd-ba40-483b-96ef-932169149bea",
			"key": "email",
			"value": ""
		},
		{
			"id": "c9ad7da3-a4da-4ede-93ea-f983e33ba35f",
			"key": "password",
			"value": "123456*A"
		},
		{
			"id": "725dd6ed-faf8-463e-94c7-db3102946e65",
			"key": "userID",
			"value": "41"
		},
		{
			"id": "642bd899-33f3-4cac-8f2f-6ed0a1a5ac52",
			"key": "randomNumber",
			"value": ""
		},
		{
			"id": "f68cd47f-7124-49ef-8628-c0193a79bfae",
			"key": "userExpertise",
			"value": "",
			"type": "string"
		},
		{
			"id": "b46bd113-d264-4d05-be78-a61d8cfc526e",
			"key": "user_lastName",
			"value": ""
		},
		{
			"id": "d5009da8-c1a5-4c5b-9d69-239bdd5117d0",
			"key": "user_fullName",
			"value": "",
			"type": "string"
		},
		{
			"id": "b478589f-dc8f-4be3-86f5-eee924d2364f",
			"key": "user_birthDate",
			"value": ""
		},
		{
			"id": "591b2ab7-f2c0-4a41-ab6a-41e44119b869",
			"key": "user_picturePrivacy",
			"value": ""
		},
		{
			"id": "e2342746-38bc-46ab-b8c5-0712791e6a39",
			"key": "user_firstName",
			"value": ""
		},
		{
			"id": "f53de8d8-154c-4c49-bf68-81526dafcfb0",
			"key": "cityData",
			"value": "1,Sofia\n2,Plovdiv\n3,Varna\n4,Burgas\n5,Ruse\n6,Stara Zagora\n7,Pleven\n8,Sliven\n9,Dobrich\n10,Shumen\n11,Pernik\n12,Haskovo\n13,Vratsa\n14,Kyustendil\n15,Montana\n16,Lovech\n17,Razgrad\n18,Borino\n19,Madan\n20,Zlatograd\n21,Pazardzhik\n22,Smolyan\n23,Blagoevgrad\n24,Nedelino\n25,Rudozem\n26,Devin\n27,Veliko Tarnovo\n28,Vidin\n29,Kirkovo\n30,Krumovgrad\n31,Dzhebel\n32,Silistra\n33,Sarnitsa\n34,Shiroka Laka\n35,Yambol\n36,Dospat\n37,Kardzhali\n38,Gabrovo\n39,Targovishte\n",
			"type": "string"
		},
		{
			"id": "37211c90-4093-46e1-8a18-b74536dfb407",
			"key": "city_name",
			"value": ""
		},
		{
			"id": "b2d1718f-1746-45b6-b529-075f11dc1387",
			"key": "city_id",
			"value": ""
		},
		{
			"id": "aaae02b1-7cdc-45dc-b647-d82efcdbdc6b",
			"key": "user_sex",
			"value": ""
		},
		{
			"id": "efc58b85-b81d-4a26-9019-3d4491223942",
			"key": "requestId",
			"value": ""
		},
		{
			"id": "47260249-f098-4d6a-9c82-c0e51182f017",
			"key": "senderUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "939967d5-b624-4cea-809a-12a04a633550",
			"key": "recipientUsername",
			"value": "",
			"type": "string"
		},
		{
			"id": "b1aced32-8ddb-4a29-8bb3-35b6b639be31",
			"key": "deletePost",
			"value": ""
		},
		{
			"id": "848daf12-62f3-4a80-aed6-863bb2b58850",
			"key": "newestPostId",
			"value": ""
		},
		{
			"id": "473729ca-75f5-4d58-b8cd-3face41ba752",
			"key": "authUser",
			"value": ""
		},
		{
			"id": "816f94c5-385b-4156-82ae-49993353ed15",
			"key": "hundred_symbols",
			"value": ""
		},
		{
			"id": "f4c4f143-cc50-4a1b-9544-deea1571abb7",
			"key": "postCreate",
			"value": ""
		},
		{
			"id": "7c5bdea5-6f3e-476f-9829-2f77c7d61685",
			"key": "getPost",
			"value": ""
		},
		{
			"id": "09ce391b-cd35-481f-9f9b-0fc19e50bb42",
			"key": "hundred_symbols_edited",
			"value": ""
		},
		{
			"id": "db854f36-fef5-4c98-a64d-629e0d925a52",
			"key": "commentsCount",
			"value": ""
		},
		{
			"id": "8a18fa77-8585-471d-9de9-c2103b3cd9d4",
			"key": "findAllComments",
			"value": ""
		},
		{
			"id": "a2a35d01-82b6-4c97-a784-4583feabdb6c",
			"key": "hundred_symbols_comment",
			"value": ""
		},
		{
			"id": "dc037226-6837-43d4-beae-96313c813020",
			"key": "previousCommentsCount",
			"value": ""
		},
		{
			"id": "c1674ef8-15d8-477b-be87-4729cafa2754",
			"key": "newestCommentId",
			"value": ""
		},
		{
			"id": "6504031f-dd15-4dc1-9c31-26bb646c9af5",
			"key": "commentCreate",
			"value": ""
		},
		{
			"id": "b84ef810-18ae-49a9-b4c6-f4514028c6ca",
			"key": "hundred_symbols_edited_comment",
			"value": ""
		},
		{
			"id": "84bbadaa-eea1-4642-84d5-44a750c0a5a5",
			"key": "commentLikes",
			"value": ""
		},
		{
			"id": "ca84db40-f605-45d1-9b0e-55c3ebeade55",
			"key": "skill1",
			"value": ""
		},
		{
			"id": "b067f805-565b-407b-a343-cb6fcf82356e",
			"key": "skill2",
			"value": ""
		},
		{
			"id": "9a84c975-57ba-4e0a-8505-17ff678fab95",
			"key": "skill3",
			"value": ""
		},
		{
			"id": "e57e97d2-416a-42f7-8c47-0466307beb1f",
			"key": "getAllComments",
			"value": ""
		},
		{
			"id": "ffe2385a-3ff2-4f62-b89f-3092b2a29774",
			"key": "commentLiked",
			"value": ""
		}
	]
}